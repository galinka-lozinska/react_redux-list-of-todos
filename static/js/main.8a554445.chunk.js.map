{"version":3,"sources":["store/todosList.ts","store/currentUser.ts","store/index.ts","api/helper.ts","components/NavMenuTodo/NavMenuTodo.tsx","components/UpdateTodo/UpdateTodo.tsx","components/TodoList/TodoList.tsx","api/api.js","components/CurrentUser/CurrentUser.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["initialState","pending","todos","error","selectedTodoId","filteringType","query","user","id","name","phone","email","selectedUserId","rootReducer","combineReducers","todosState","state","action","type","map","todo","userState","userId","getTodosListPending","getTodosPending","getTodosListError","getTodosError","getNavMenuTypeFiltering","getFilteringType","getCurrentUserId","getUserId","getCurrentUserPending","getUserPending","getCurrentUser","getUser","getCurrentUserError","getUserError","store","createStore","composeWithDevTools","applyMiddleware","thunk","getFilteringTodosList","lowQuery","toLowerCase","updateList","filter","completed","title","includes","NavMenuTodo","todosList","setTodosList","dispatch","useDispatch","navMenuType","useSelector","sortingTodoList","useCallback","sortList","sort","todo1","todo2","localeCompare","randomizeList","randomTodos","i","length","j","Math","floor","random","temp","className","placeholder","onChange","event","target","value","href","classNames","selected","onClick","UpdateTodo","setTodoId","setUpdateList","useState","changedTodo","setChangedTodo","htmlFor","updateTodo","prevList","item","connector","connect","todoId","useEffect","key","checked","readOnly","selectedUser","BASE_URL","request","fetch","mapDispatchToProps","getUserFromServer","then","response","json","setUser","data","catch","setUserError","toString","Loader","alt","src","getTodos","setTodos","setTodosError","pendingTodos","pendingUser","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a554445.chunk.js","sourcesContent":["import { } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { InitialTodosStateT, TODOSTYPE } from '../api/interface';\n\nexport const FETCH_TODOS_PENDING = 'FETCH_TODOS_PENDING';\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS';\nexport const FETCH_TODOS_ERROR = 'FETCH_TODOS_ERROR';\nexport const UPDATE_SELECTED_TODO = 'REMOVE_SELECTED_TODO';\nexport const ALL_TODOS = 'All_TODOS';\nexport const COMPLETED_TODOS = 'COMPLETED_TODOS';\nexport const ACTIVE_TODOS = 'ACTIVE_TODOS';\nexport const FILTERING = 'FILTERING';\n\nconst initialState: InitialTodosStateT = {\n  pending: false,\n  todos: [],\n  error: null,\n  selectedTodoId: 0,\n  filteringType: ALL_TODOS,\n  query: '',\n};\n\nexport function allTodosAction() {\n  return {\n    type: ALL_TODOS,\n  };\n}\n\nexport function completedTodosAction() {\n  return {\n    type: COMPLETED_TODOS,\n  };\n}\n\nexport function activeTodosAction() {\n  return {\n    type: ACTIVE_TODOS,\n  };\n}\n\nexport function filterTodos(query: string) {\n  return {\n    type: FILTERING,\n    query,\n  };\n}\n\nexport function setPending() {\n  return {\n    type: FETCH_TODOS_PENDING,\n  };\n}\n\nexport function setTodos(todos: TODOSTYPE[]) {\n  return {\n    type: FETCH_TODOS_SUCCESS,\n    todos: todos.filter(todo => todo.title),\n  };\n}\n\nexport function setTodosError(error: string) {\n  return {\n    type: FETCH_TODOS_ERROR,\n    error,\n  };\n}\n\nexport function updateTodo(todo: TODOSTYPE) {\n  return {\n    type: UPDATE_SELECTED_TODO,\n    todo,\n  };\n}\n\nexport function todosReducer(state = initialState, action: AnyAction) {\n  switch (action.type) {\n    case FETCH_TODOS_PENDING:\n      return {\n        ...state,\n        pending: true,\n      };\n    case FETCH_TODOS_SUCCESS:\n      return {\n        ...state,\n        pending: false,\n        todos: action.todos,\n      };\n    case FETCH_TODOS_ERROR:\n      return {\n        ...state,\n        pending: false,\n        error: action.error,\n      };\n    case UPDATE_SELECTED_TODO:\n      return {\n        ...state,\n        todos: state.todos.map(\n          todo => (todo.id === action.todo.id\n            ? {\n              ...action.todo,\n            } : todo),\n        ),\n      };\n    case ALL_TODOS:\n    case ACTIVE_TODOS:\n    case COMPLETED_TODOS:\n      return {\n        ...state,\n        filteringType: action.type,\n      };\n    case FILTERING:\n      return {\n        ...state,\n        query: action.query,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const getTodos = (state: InitialTodosStateT): TODOSTYPE[] => state.todos;\nexport const getTodosPending = (state: InitialTodosStateT): boolean => state.pending;\nexport const getTodosError = (state: InitialTodosStateT): string | null => state.error;\nexport const getFilteringType = (state: InitialTodosStateT): string => state.filteringType;\nexport const getQueryFiltering = (state: InitialTodosStateT): string => state.query;\n","import { AnyAction } from 'redux';\nimport { InitialUserStateT, USERTYPE } from '../api/interface';\n\nexport const FETCH_USER_PENDING = 'FETCH_USER_PENDING';\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nexport const FETCH_USER_ERROR = 'FETCH_USER_ERROR';\nexport const SELECTED_USER = 'SELECTED_USER';\nexport const CLEAR_SELECTED_USER = 'CLEAR_SELECTED_USER';\n\nexport function setLoading() {\n  return {\n    type: FETCH_USER_PENDING,\n  };\n}\n\nexport function setUser(user: USERTYPE[]) {\n  return {\n    type: FETCH_USER_SUCCESS,\n    user,\n  };\n}\n\nexport function setUserError(error: string) {\n  return {\n    type: FETCH_USER_ERROR,\n    error,\n  };\n}\n\nexport function selectedUser(userId: number) {\n  return {\n    type: SELECTED_USER,\n    userId,\n  };\n}\n\nexport function clearSelectedUser() {\n  return {\n    type: CLEAR_SELECTED_USER,\n  };\n}\n\nconst initialState: InitialUserStateT = {\n  pending: false,\n  user: {\n    id: 0,\n    name: '',\n    phone: '',\n    email: '',\n  },\n  selectedUserId: 0,\n  error: null,\n};\n\nexport function userReducer(state: InitialUserStateT = initialState, action: AnyAction) {\n  switch (action.type) {\n    case FETCH_USER_PENDING:\n      return {\n        ...state,\n        pending: true,\n      };\n    case FETCH_USER_SUCCESS:\n      return {\n        ...state,\n        pending: false,\n        user: action.user,\n      };\n    case FETCH_USER_ERROR:\n      return {\n        ...state,\n        pending: false,\n        error: action.error,\n      };\n    case SELECTED_USER:\n      return {\n        ...state,\n        selectedUserId: action.userId,\n      };\n    case CLEAR_SELECTED_USER:\n      return {\n        ...state,\n        selectedUserId: 0,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const getUserId = (state: InitialUserStateT): number => state.selectedUserId;\nexport const getUser = (state: InitialUserStateT): USERTYPE => state.user;\nexport const getUserPending = (state: InitialUserStateT): boolean => state.pending;\nexport const getUserError = (state: InitialUserStateT): null | string => state.error;\n","import thunk from 'redux-thunk';\nimport {\n  createStore, applyMiddleware, combineReducers,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n  todosReducer,\n  getTodos,\n  getTodosError,\n  getTodosPending,\n  getFilteringType,\n  getQueryFiltering,\n} from './todosList';\nimport {\n  getUser,\n  getUserId,\n  getUserError,\n  getUserPending,\n  userReducer,\n} from './currentUser';\nimport { RooTStateT, TODOSTYPE, USERTYPE } from '../api/interface';\n\nconst rootReducer = combineReducers({\n  todosState: todosReducer,\n  userState: userReducer,\n});\n\n// #region todosState selector\nexport const getTodosListPending\n  = (state: RooTStateT): boolean => getTodosPending(state.todosState);\nexport const getTodosList = (state: RooTStateT): TODOSTYPE[] => getTodos(state.todosState);\nexport const getTodosListError\n  = (state: RooTStateT): string | null => getTodosError(state.todosState);\nexport const getNavMenuTypeFiltering\n  = (state: RooTStateT): string => getFilteringType(state.todosState);\nexport const getQueryFilteringTodos\n  = (state: RooTStateT): string => getQueryFiltering(state.todosState);\n  // #endregion\n\n// #region userState selector\nexport const getCurrentUserId = (state: RooTStateT): number => getUserId(state.userState);\nexport const getCurrentUserPending\n  = (state: RooTStateT): boolean => getUserPending(state.userState);\nexport const getCurrentUser = (state: RooTStateT): USERTYPE => getUser(state.userState);\nexport const getCurrentUserError\n  = (state: RooTStateT): string | null => getUserError(state.userState);\n// #endregion\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import {\n  ACTIVE_TODOS, COMPLETED_TODOS,\n} from '../store/todosList';\nimport { InitialTodosStateT, TODOSTYPE } from './interface';\n\nexport function getFilteringTodosList(state: InitialTodosStateT) {\n  const lowQuery = state.query.toLowerCase();\n  let updateList: TODOSTYPE[] = [...state.todos];\n\n  switch (state.filteringType) {\n    case ACTIVE_TODOS:\n      updateList = state.todos.filter(todo => !todo.completed);\n      break;\n    case COMPLETED_TODOS:\n      updateList = state.todos.filter(todo => todo.completed);\n      break;\n    default:\n      break;\n  }\n\n  if (state.query) {\n    return updateList.filter(\n      todo => todo.title && todo.title.toLowerCase().includes(lowQuery),\n    );\n  }\n\n  return updateList;\n}\n","import React, { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  activeTodosAction,\n  ACTIVE_TODOS,\n  allTodosAction,\n  ALL_TODOS,\n  completedTodosAction,\n  COMPLETED_TODOS,\n  filterTodos,\n} from '../../store/todosList';\nimport './NavMenuTodo.scss';\nimport { getNavMenuTypeFiltering } from '../../store';\nimport { clearSelectedUser } from '../../store/currentUser';\nimport { TODOSTYPE } from '../../api/interface';\n\ntype NavMenuTodo = {\n  todosList: TODOSTYPE[];\n  setTodosList: Function;\n};\n\nexport const NavMenuTodo: React.FC<NavMenuTodo> = ({ todosList, setTodosList }) => {\n  const dispatch = useDispatch();\n  const navMenuType = useSelector(getNavMenuTypeFiltering);\n\n  const sortingTodoList = useCallback(() => {\n    const sortList = [...todosList].sort(\n      (todo1: TODOSTYPE, todo2: TODOSTYPE) => todo1.title.localeCompare(todo2.title),\n    );\n\n    setTodosList(sortList);\n  }, [todosList, setTodosList]);\n\n  const randomizeList = useCallback(() => {\n    const randomTodos: TODOSTYPE[] = [...todosList];\n\n    for (let i = randomTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * i);\n      const temp = randomTodos[i];\n\n      randomTodos[i] = randomTodos[j];\n      randomTodos[j] = temp;\n    }\n\n    setTodosList(randomTodos);\n  }, [todosList, setTodosList]);\n\n  return (\n    <div className=\"nav-menu\">\n      <input\n        type=\"text\"\n        placeholder=\"Tittle....\"\n        onChange={(event) => {\n          dispatch(filterTodos(event.target.value));\n        }}\n      />\n      <div>\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/all\"\n              className={classNames({ selected: navMenuType === ALL_TODOS })}\n              onClick={() => {\n                dispatch(allTodosAction());\n              }}\n            >\n              All\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"#/active\"\n              className={classNames({ selected: navMenuType === ACTIVE_TODOS })}\n              onClick={() => {\n                dispatch(activeTodosAction());\n              }}\n            >\n              Active\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"#/completed\"\n              className={classNames({ selected: navMenuType === COMPLETED_TODOS })}\n              onClick={() => {\n                dispatch(completedTodosAction());\n              }}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => dispatch(clearSelectedUser())}\n        >\n          Clear selected\n        </button>\n        <button\n          type=\"button\"\n          className=\"randomize\"\n          onClick={() => {\n            randomizeList();\n          }}\n        >\n          Randomize\n        </button>\n        <button\n          type=\"button\"\n          className=\"sort\"\n          onClick={() => sortingTodoList()}\n        >\n          Sort\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TODOSTYPE } from '../../api/interface';\nimport { updateTodo } from '../../store/todosList';\nimport './UpdateTodo.scss';\n\ntype UpdateType = {\n  todo: TODOSTYPE;\n  setTodoId: Function;\n  setUpdateList: Function;\n};\n\nexport const UpdateTodo: React.FC<UpdateType> = ({ todo, setTodoId, setUpdateList }) => {\n  const [changedTodo, setChangedTodo] = useState<TODOSTYPE>(todo);\n  const dispatch = useDispatch();\n\n  const handleChangedTodo = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (value) {\n      setChangedTodo({\n        ...changedTodo,\n        title: value,\n      });\n    }\n  };\n\n  const handleSaveChangedTodo = () => {\n    dispatch(updateTodo(changedTodo));\n    setUpdateList(\n      (prevList: TODOSTYPE[]) => prevList.map(\n        item => (item.id === changedTodo.id ? changedTodo : item),\n      ),\n    );\n    setTodoId(0);\n  };\n\n  return (\n    <>\n      <label htmlFor=\"title\">\n        <input\n          id=\"title\"\n          type=\"text\"\n          value={changedTodo.title}\n          className=\"update-todo-title\"\n          onChange={handleChangedTodo}\n        />\n      </label>\n\n      <div>\n        <button\n          className=\"\n                TodoList__user-button\n                TodoList__user-button--update\n                button\n              \"\n          type=\"button\"\n          onClick={handleSaveChangedTodo}\n        >\n          Save\n        </button>\n\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  useDispatch, connect, ConnectedProps,\n} from 'react-redux';\nimport { getFilteringTodosList } from '../../api/helper';\nimport { RooTStateT, TODOSTYPE } from '../../api/interface';\nimport { selectedUser } from '../../store/currentUser';\nimport { NavMenuTodo } from '../NavMenuTodo/NavMenuTodo';\nimport { UpdateTodo } from '../UpdateTodo';\nimport './TodoList.scss';\n\nconst mapStateToProps = (state: RooTStateT) => ({\n  todos: getFilteringTodosList(state.todosState),\n});\n\nconst connector = connect(\n  mapStateToProps,\n);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const [updateList, setUpdateList] = useState<TODOSTYPE[]>(todos);\n  const [todoId, setTodoId] = useState<number>(0);\n\n  useEffect(() => {\n    setUpdateList(todos);\n  }, [todos.length]);\n\n  const dispatch = useDispatch();\n\n  const handleClickUser = (userId: number) => {\n    dispatch(selectedUser(userId));\n  };\n\n  return (\n    <>\n      <NavMenuTodo\n        todosList={updateList}\n        setTodosList={setUpdateList}\n      />\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {updateList.map(todo => (\n              <li className=\"TodoList__item TodoList__item--unchecked\" key={todo.id}>\n                {todoId === todo.id\n                  ? (\n                    <UpdateTodo\n                      todo={todo}\n                      setTodoId={setTodoId}\n                      setUpdateList={setUpdateList}\n                    />\n                  ) : (\n                    <>\n                      <label htmlFor=\"title\">\n                        <input\n                          id=\"title\"\n                          type=\"checkbox\"\n                          checked={todo.completed}\n                          readOnly\n                        />\n                        <p>{todo.title}</p>\n                      </label>\n\n                      <div>\n                        <button\n                          className=\"\n                            TodoList__user-button\n                            TodoList__user-button--remove\n                            button\n                          \"\n                          type=\"button\"\n                          onClick={() => {\n                            setTodoId(todo.id);\n                          }}\n                        >\n                          Remove\n                        </button>\n\n                        <button\n                          className=\"\n                            TodoList__user-button\n                            TodoList__user-button--selected\n                            button\n                          \"\n                          type=\"button\"\n                          onClick={() => handleClickUser(todo.userId)}\n                        >\n                          {`User#${todo.userId}`}\n                        </button>\n                      </div>\n                    </>\n                  )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default connector(TodoList);\n","import {\n  setPending, setTodos, setTodosError,\n} from '../store/todosList';\nimport {\n  setLoading, setUser, setUserError,\n} from '../store/currentUser';\n\nconst BASE_URL = 'https://mate-api.herokuapp.com/';\n\nconst request = (key = 'todos') => fetch(`${BASE_URL}${key}`);\n\nexport const fetchTodos = () => {\n  return (dispatch) => {\n    dispatch(setPending());\n    request()\n      .then(response => response.json())\n      .then(todos => {\n        dispatch(setTodos(todos.data));\n      })\n      .catch(error => dispatch(setTodosError(error)));\n  };\n};\n\nexport const fetchUser = (userId) => {\n  return (dispatch) => {\n    dispatch(setLoading());\n    request(`users/${userId}`)\n      .then(response => response.json())\n      .then(user => dispatch(setUser(user.data)))\n      .catch(error => dispatch(setUserError(error)));\n  };\n};\n","import React, { useEffect } from 'react';\nimport { connect, ConnectedProps, useSelector } from 'react-redux';\nimport { fetchUser } from '../../api/api';\nimport {\n  getCurrentUser,\n  getCurrentUserError,\n  getCurrentUserId,\n} from '../../store';\nimport './CurrentUser.scss';\n\nconst mapDispatchToProps = {\n  getUserFromServer: fetchUser,\n};\n\nconst connector = connect(\n  null,\n  mapDispatchToProps,\n);\n\ntype PropsUser = ConnectedProps<typeof connector>;\n\nconst CurrentUser: React.FC<PropsUser> = ({\n  getUserFromServer,\n}) => {\n  const userId = useSelector(getCurrentUserId);\n  const error = useSelector(getCurrentUserError);\n  const user = useSelector(getCurrentUser);\n\n  useEffect(() => {\n    if (userId) {\n      getUserFromServer(userId);\n    }\n  }, [userId, getUserFromServer]);\n\n  return (\n    (error)\n      ? (\n        <p>{error.toString()}</p>\n      ) : (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${userId}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        </div>\n      )\n  );\n};\n\nexport default connector(CurrentUser);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <img\n    alt=\"Loader...\"\n    src=\"https://media.giphy.com/media/y1ZBcOGOOtlpC/giphy.gif\"\n  />\n);\n","import React, { useEffect } from 'react';\n\nimport './App.scss';\nimport { connect, ConnectedProps, useSelector } from 'react-redux';\nimport TodoList from './components/TodoList/TodoList';\nimport CurrentUser from './components/CurrentUser/CurrentUser';\n\nimport { fetchTodos } from './api/api';\nimport { Loader } from './components/Loader';\nimport {\n  getTodosListPending,\n  getTodosListError,\n  getCurrentUserPending,\n  getCurrentUserId,\n} from './store';\n\nconst mapDispatchToProps = {\n  getTodos: fetchTodos,\n};\n\nconst connector = connect(\n  null,\n  mapDispatchToProps,\n);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst App: React.FC<Props> = ({\n  getTodos,\n}) => {\n  const pendingTodos = useSelector(getTodosListPending);\n  const pendingUser = useSelector(getCurrentUserPending);\n  const error = useSelector(getTodosListError);\n  const userId = useSelector(getCurrentUserId);\n\n  useEffect(() => {\n    getTodos();\n  }, [getTodos]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {pendingTodos ? (\n          <Loader />\n        ) : (\n          <TodoList />\n        )}\n        {error && (\n          <p>{error.toString()}</p>\n        )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {pendingUser && userId && (\n            <Loader />\n          )}\n          { userId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default connector(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}