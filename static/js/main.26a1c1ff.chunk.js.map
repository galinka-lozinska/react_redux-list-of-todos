{"version":3,"sources":["store/todosList.ts","store/currentUser.ts","store/navMenuTodo.ts","store/index.ts","api/helper.ts","components/NavMenuTodo/NavMenuTodo.tsx","components/RemoveTodo/RemoveTodo.tsx","components/TodoList/TodoList.tsx","api/api.js","components/CurrentUser/CurrentUser.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["initialState","pending","todos","error","selectedUserId","selectedTodoId","user","id","name","phone","email","filteringType","query","rootReducer","combineReducers","todosState","state","action","type","userId","map","todo","userState","navMenuState","getTodosListPending","getTodosPending","getTodosListError","getTodosError","getTodosListUserId","getUserId","getCurrentUserPending","getUserPending","getCurrentUser","getUser","getCurrentUserError","getUserError","getNavMenuTypeFiltering","getFilteringType","store","createStore","composeWithDevTools","applyMiddleware","thunk","getFilteringTodosList","lowQuery","toLowerCase","updateList","filter","completed","title","includes","NavMenuTodo","todosList","setTodosList","dispatch","useDispatch","navMenyType","useSelector","sortingTodoList","useCallback","sortList","sort","todo1","todo2","localeCompare","randomizeList","randomTodos","i","length","j","Math","floor","random","temp","className","placeholder","onChange","event","target","value","href","classNames","selected","onClick","RemoveTodo","setTodoId","setUpdateList","useState","changedTodo","setChangedTodo","htmlFor","removeSelectedTodo","prevList","item","connector","connect","todoId","useEffect","key","checked","readOnly","selectedUser","BASE_URL","request","fetch","mapDispatchToProps","getUserFromServer","then","response","json","fetchUserSuccess","data","catch","fetchUserError","toString","Loader","alt","src","getTodos","fetchTodosSuccess","fetchTodosError","pendingTodos","pendingUser","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26a1c1ff.chunk.js","sourcesContent":["import { } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { InitialTodosStateT, TODOSTYPE } from '../api/interface';\n\nexport const FETCH_TODOS_PENDING = 'FETCH_TODOS_PENDING';\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS';\nexport const FETCH_TODOS_ERROR = 'FETCH_TODOS_ERROR';\nexport const SELECTED_USER = 'SELECTED_USER';\nexport const CLEAR_SELECTED_USER = 'CLEAR_SELECTED_USER';\nexport const REMOVE_SELECTED_TODO = 'REMOVE_SELECTED_TODO';\n\nconst initialState: InitialTodosStateT = {\n  pending: false,\n  todos: [],\n  error: null,\n  selectedUserId: 0,\n  selectedTodoId: 0,\n};\n\nexport function fetchTodosPending() {\n  return {\n    type: FETCH_TODOS_PENDING,\n  };\n}\n\nexport function fetchTodosSuccess(todos: TODOSTYPE[]) {\n  return {\n    type: FETCH_TODOS_SUCCESS,\n    todos,\n  };\n}\n\nexport function fetchTodosError(error: string) {\n  return {\n    type: FETCH_TODOS_ERROR,\n    error,\n  };\n}\n\nexport function selectedUser(userId: number) {\n  return {\n    type: SELECTED_USER,\n    userId,\n  };\n}\n\nexport function clearSelectedUser() {\n  return {\n    type: CLEAR_SELECTED_USER,\n  };\n}\n\nexport function removeSelectedTodo(todo: TODOSTYPE) {\n  return {\n    type: REMOVE_SELECTED_TODO,\n    todo,\n  };\n}\n\nexport function todosReducer(state = initialState, action: AnyAction) {\n  switch (action.type) {\n    case FETCH_TODOS_PENDING:\n      return {\n        ...state,\n        pending: true,\n      };\n    case FETCH_TODOS_SUCCESS:\n      return {\n        ...state,\n        pending: false,\n        todos: action.todos,\n      };\n    case FETCH_TODOS_ERROR:\n      return {\n        ...state,\n        pending: false,\n        error: action.error,\n      };\n    case SELECTED_USER:\n      return {\n        ...state,\n        selectedUserId: action.userId,\n      };\n    case CLEAR_SELECTED_USER:\n      return {\n        ...state,\n        selectedUserId: 0,\n      };\n    case REMOVE_SELECTED_TODO:\n      return {\n        ...state,\n        todos: state.todos.map(\n          todo => (todo.id === action.todo.id\n            ? {\n              ...action.todo,\n            } : todo),\n        ),\n      };\n    default:\n      return state;\n  }\n}\n\nexport const getTodos = (state: InitialTodosStateT): TODOSTYPE[] => state.todos;\nexport const getTodosPending = (state: InitialTodosStateT): boolean => state.pending;\nexport const getTodosError = (state: InitialTodosStateT): string | null => state.error;\nexport const getUserId = (state: InitialTodosStateT): number => state.selectedUserId;\n","import { AnyAction } from 'redux';\nimport { InitialUserStateT, USERTYPE } from '../api/interface';\n\nexport const FETCH_USER_PENDING = 'FETCH_USER_PENDING';\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nexport const FETCH_USER_ERROR = 'FETCH_USER_ERROR';\n\nexport function fetchUserPending() {\n  return {\n    type: FETCH_USER_PENDING,\n  };\n}\n\nexport function fetchUserSuccess(user: USERTYPE[]) {\n  return {\n    type: FETCH_USER_SUCCESS,\n    user,\n  };\n}\n\nexport function fetchUserError(error: string) {\n  return {\n    type: FETCH_USER_ERROR,\n    error,\n  };\n}\n\nconst initialState: InitialUserStateT = {\n  pending: false,\n  user: {\n    id: 0,\n    name: '',\n    phone: '',\n    email: '',\n  },\n  error: null,\n};\n\nexport function userReducer(state: InitialUserStateT = initialState, action: AnyAction) {\n  switch (action.type) {\n    case FETCH_USER_PENDING:\n      return {\n        ...state,\n        pending: true,\n      };\n    case FETCH_USER_SUCCESS:\n      return {\n        ...state,\n        pending: false,\n        user: action.user,\n      };\n    case FETCH_USER_ERROR:\n      return {\n        ...state,\n        pending: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const getUser = (state: InitialUserStateT): USERTYPE => state.user;\nexport const getUserPending = (state: InitialUserStateT): boolean => state.pending;\nexport const getUserError = (state: InitialUserStateT): null | string => state.error;\n","import { AnyAction } from 'redux';\nimport { NavType } from '../api/interface';\n\nexport const ALL_TODOS = 'All_TODOS';\nexport const COMPLETED_TODOS = 'COMPLETED_TODOS';\nexport const ACTIVE_TODOS = 'ACTIVE_TODOS';\nexport const FILTERING = 'FILTERING';\n\nexport function allTodosAction() {\n  return {\n    type: ALL_TODOS,\n  };\n}\n\nexport function completedTodosAction() {\n  return {\n    type: COMPLETED_TODOS,\n  };\n}\n\nexport function activeTodosAction() {\n  return {\n    type: ACTIVE_TODOS,\n  };\n}\n\nexport function filteringTodosAction(query: string) {\n  return {\n    type: FILTERING,\n    query,\n  };\n}\n\nconst initialState: NavType = {\n  filteringType: ALL_TODOS,\n  query: '',\n};\n\nexport function navReducer(state: NavType = initialState, action: AnyAction) {\n  switch (action.type) {\n    case ALL_TODOS:\n    case ACTIVE_TODOS:\n    case COMPLETED_TODOS:\n      return {\n        ...state,\n        filteringType: action.type,\n      };\n    case FILTERING:\n      return {\n        ...state,\n        query: action.query,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const getFilteringType = (state: NavType): string => state.filteringType;\nexport const getQueryFiltering = (state: NavType): string => state.query;\n","import thunk from 'redux-thunk';\nimport {\n  createStore, applyMiddleware, combineReducers,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n  todosReducer,\n  getTodos,\n  getTodosError,\n  getUserId,\n  getTodosPending,\n} from './todosList';\nimport {\n  getUser, getUserError, getUserPending, userReducer,\n} from './currentUser';\nimport { RooTStateT, TODOSTYPE, USERTYPE } from '../api/interface';\nimport {\n  getFilteringType, getQueryFiltering, navReducer,\n} from './navMenuTodo';\n\nconst rootReducer = combineReducers({\n  todosState: todosReducer,\n  userState: userReducer,\n  navMenuState: navReducer,\n});\n\n// #region todosState selector\nexport const getTodosListPending\n  = (state: RooTStateT): boolean => getTodosPending(state.todosState);\nexport const getTodosList = (state: RooTStateT): TODOSTYPE[] => getTodos(state.todosState);\nexport const getTodosListError\n  = (state: RooTStateT): string | null => getTodosError(state.todosState);\nexport const getTodosListUserId = (state: RooTStateT): number => getUserId(state.todosState);\n// #endregion\n\n// #region userState selector\nexport const getCurrentUserPending\n  = (state: RooTStateT): boolean => getUserPending(state.userState);\nexport const getCurrentUser = (state: RooTStateT): USERTYPE => getUser(state.userState);\nexport const getCurrentUserError\n  = (state: RooTStateT): string | null => getUserError(state.userState);\n// #endregion\n\n// #region navMenuState selector\nexport const getNavMenuTypeFiltering\n  = (state: RooTStateT): string => getFilteringType(state.navMenuState);\nexport const getQueryFilteringTodos\n  = (state: RooTStateT): string => getQueryFiltering(state.navMenuState);\n// #endregion\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import {\n  ACTIVE_TODOS, COMPLETED_TODOS,\n} from '../store/navMenuTodo';\nimport { NavType, TODOSTYPE } from './interface';\n\nexport function getFilteringTodosList(todos: TODOSTYPE[], action: NavType) {\n  const lowQuery = action.query.toLowerCase();\n  let updateList: TODOSTYPE[] = [...todos];\n\n  switch (action.filteringType) {\n    case ACTIVE_TODOS:\n      updateList = todos.filter(todo => todo.completed === false);\n      break;\n    case COMPLETED_TODOS:\n      updateList = todos.filter(todo => todo.completed === true);\n      break;\n    default:\n      break;\n  }\n\n  if (action.query) {\n    return updateList.filter(\n      todo => todo.title && todo.title.toLowerCase().includes(lowQuery),\n    );\n  }\n\n  return updateList;\n}\n","import React, { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  activeTodosAction,\n  ACTIVE_TODOS,\n  allTodosAction,\n  ALL_TODOS,\n  completedTodosAction,\n  COMPLETED_TODOS,\n  filteringTodosAction,\n} from '../../store/navMenuTodo';\nimport './NavMenuTodo.scss';\nimport { getNavMenuTypeFiltering } from '../../store';\nimport { clearSelectedUser } from '../../store/todosList';\nimport { TODOSTYPE } from '../../api/interface';\n\ntype NavMenuTodo = {\n  todosList: TODOSTYPE[];\n  setTodosList: Function;\n};\n\nexport const NavMenuTodo: React.FC<NavMenuTodo> = ({ todosList, setTodosList }) => {\n  const dispatch = useDispatch();\n  const navMenyType = useSelector(getNavMenuTypeFiltering);\n\n  const sortingTodoList = useCallback(() => {\n    const sortList = [...todosList].sort(\n      (todo1: TODOSTYPE, todo2: TODOSTYPE) => {\n        if (todo1.title && todo2.title) {\n          return todo1.title.localeCompare(todo2.title);\n        }\n\n        return 0;\n      },\n    );\n\n    setTodosList(sortList);\n  }, [todosList, setTodosList]);\n\n  const randomizeList = useCallback(() => {\n    const randomTodos: TODOSTYPE[] = [...todosList];\n\n    for (let i = randomTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * i);\n      const temp = randomTodos[i];\n\n      randomTodos[i] = randomTodos[j];\n      randomTodos[j] = temp;\n    }\n\n    setTodosList(randomTodos);\n  }, [todosList, setTodosList]);\n\n  return (\n    <div className=\"nav-menu\">\n      <input\n        type=\"text\"\n        placeholder=\"Tittle....\"\n        onChange={(event) => {\n          dispatch(filteringTodosAction(event.target.value));\n        }}\n      />\n      <div>\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/all\"\n              className={classNames({ selected: navMenyType === ALL_TODOS })}\n              onClick={() => {\n                dispatch(allTodosAction());\n              }}\n            >\n              All\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"#/active\"\n              className={classNames({ selected: navMenyType === ACTIVE_TODOS })}\n              onClick={() => {\n                dispatch(activeTodosAction());\n              }}\n            >\n              Active\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"#/completed\"\n              className={classNames({ selected: navMenyType === COMPLETED_TODOS })}\n              onClick={() => {\n                dispatch(completedTodosAction());\n              }}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => dispatch(clearSelectedUser())}\n        >\n          Clear selected\n        </button>\n        <button\n          type=\"button\"\n          className=\"randomize\"\n          onClick={() => {\n            randomizeList();\n          }}\n        >\n          Randomize\n        </button>\n        <button\n          type=\"button\"\n          className=\"sort\"\n          onClick={() => sortingTodoList()}\n        >\n          Sort\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TODOSTYPE } from '../../api/interface';\nimport { removeSelectedTodo } from '../../store/todosList';\nimport './RemoveTodo.scss';\n\ntype RemoveType = {\n  todo: TODOSTYPE;\n  setTodoId: Function;\n  setUpdateList: Function;\n};\n\nexport const RemoveTodo: React.FC<RemoveType> = ({ todo, setTodoId, setUpdateList }) => {\n  const [changedTodo, setChangedTodo] = useState<TODOSTYPE>(todo);\n  const dispatch = useDispatch();\n\n  const handleChangedTodo = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value) {\n      setChangedTodo({\n        ...changedTodo,\n        title: event.target.value,\n      });\n    }\n  };\n\n  const handleSaveChangedTodo = () => {\n    dispatch(removeSelectedTodo(changedTodo));\n    setUpdateList(\n      (prevList: TODOSTYPE[]) => prevList.map(\n        (item: TODOSTYPE) => (item.id === changedTodo.id ? changedTodo : item),\n      ),\n    );\n    setTodoId(0);\n  };\n\n  return (\n    <>\n      <label htmlFor=\"title\">\n        <input\n          id=\"title\"\n          type=\"text\"\n          value={changedTodo.title}\n          className=\"remove-todo-title\"\n          onChange={handleChangedTodo}\n        />\n      </label>\n\n      <div>\n        <button\n          className=\"\n                TodoList__user-button\n                TodoList__user-button--remove\n                button\n              \"\n          type=\"button\"\n          onClick={handleSaveChangedTodo}\n        >\n          Save\n        </button>\n\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  useDispatch, connect, ConnectedProps,\n} from 'react-redux';\nimport { getFilteringTodosList } from '../../api/helper';\nimport { RooTStateT, TODOSTYPE } from '../../api/interface';\nimport { selectedUser } from '../../store/todosList';\nimport { NavMenuTodo } from '../NavMenuTodo/NavMenuTodo';\nimport { RemoveTodo } from '../RemoveTodo';\nimport './TodoList.scss';\n\nconst mapStateToProps = (state: RooTStateT) => ({\n  todos: getFilteringTodosList(state.todosState.todos, state.navMenuState),\n});\n\nconst connector = connect(\n  mapStateToProps,\n);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const [updateList, setUpdateList] = useState<TODOSTYPE[]>(todos);\n  const [todoId, setTodoId] = useState<number>(0);\n\n  useEffect(() => {\n    setUpdateList(todos);\n  }, [todos.length]);\n\n  const dispatch = useDispatch();\n\n  const handleClickUser = (userId: number) => {\n    dispatch(selectedUser(userId));\n  };\n\n  return (\n    <>\n      <NavMenuTodo\n        todosList={updateList}\n        setTodosList={setUpdateList}\n      />\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {updateList.map((todo: TODOSTYPE) => (\n              <li className=\"TodoList__item TodoList__item--unchecked\" key={todo.id}>\n                {todoId === todo.id\n                  ? (\n                    <RemoveTodo\n                      todo={todo}\n                      setTodoId={setTodoId}\n                      setUpdateList={setUpdateList}\n                    />\n                  ) : (\n                    <>\n                      <label htmlFor=\"title\">\n                        <input\n                          id=\"title\"\n                          type=\"checkbox\"\n                          checked={todo.completed}\n                          readOnly\n                        />\n                        <p>{todo.title}</p>\n                      </label>\n\n                      <div>\n                        <button\n                          className=\"\n                          TodoList__user-button\n                          TodoList__user-button--remove\n                          button\n                        \"\n                          type=\"button\"\n                          onClick={() => {\n                            setTodoId(todo.id);\n                          }}\n                        >\n                          Remove\n                        </button>\n\n                        <button\n                          className=\"\n                          TodoList__user-button\n                          TodoList__user-button--selected\n                          button\n                        \"\n                          type=\"button\"\n                          onClick={() => handleClickUser(todo.userId)}\n                        >\n                          {`User#${todo.userId}`}\n                        </button>\n                      </div>\n                    </>\n                  )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default connector(TodoList);\n","import {\n  fetchTodosPending, fetchTodosSuccess, fetchTodosError,\n} from '../store/todosList';\nimport {\n  fetchUserPending, fetchUserSuccess, fetchUserError,\n} from '../store/currentUser';\n\nconst BASE_URL = 'https://mate-api.herokuapp.com/';\n\nconst request = (key = 'todos') => fetch(`${BASE_URL}${key}`);\n\nexport const fetchTodos = () => {\n  return (dispatch) => {\n    dispatch(fetchTodosPending());\n    request()\n      .then(response => response.json())\n      .then(todos => {\n        dispatch(fetchTodosSuccess(todos.data));\n      })\n      .catch(error => dispatch(fetchTodosError(error)));\n  };\n};\n\nexport const fetchUser = (userId) => {\n  return (dispatch) => {\n    dispatch(fetchUserPending());\n    request(`users/${userId}`)\n      .then(response => response.json())\n      .then(user => dispatch(fetchUserSuccess(user.data)))\n      .catch(error => dispatch(fetchUserError(error)));\n  };\n};\n","import React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { fetchUser } from '../../api/api';\nimport { RooTStateT } from '../../api/interface';\nimport {\n  getCurrentUser,\n  getCurrentUserError,\n  getCurrentUserPending,\n  getTodosListUserId,\n} from '../../store';\nimport './CurrentUser.scss';\n\nconst mapStateToProps = (state: RooTStateT) => ({\n  userId: getTodosListUserId(state),\n  pending: getCurrentUserPending(state),\n  error: getCurrentUserError(state),\n  user: getCurrentUser(state),\n});\n\nconst mapDispatchToProps = {\n  getUserFromServer: fetchUser,\n};\n\nconst connector = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n);\n\ntype PropsUser = ConnectedProps<typeof connector>;\n\nconst CurrentUser: React.FC<PropsUser> = ({\n  userId,\n  error,\n  user,\n  getUserFromServer,\n}) => {\n  useEffect(() => {\n    if (userId !== 0) {\n      getUserFromServer(userId);\n    }\n  }, [userId, getUserFromServer]);\n\n  return (\n    (error)\n      ? (\n        <p>{error.toString()}</p>\n      ) : (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${userId}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        </div>\n      )\n  );\n};\n\nexport default connector(CurrentUser);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <img\n    alt=\"Loader...\"\n    src=\"https://media.giphy.com/media/y1ZBcOGOOtlpC/giphy.gif\"\n  />\n);\n","import React, { useEffect } from 'react';\n\nimport './App.scss';\nimport { connect, ConnectedProps } from 'react-redux';\nimport TodoList from './components/TodoList/TodoList';\nimport CurrentUser from './components/CurrentUser/CurrentUser';\n\nimport { fetchTodos } from './api/api';\nimport { Loader } from './components/Loader';\nimport {\n  getTodosListPending, getTodosListError, getTodosListUserId, getCurrentUserPending,\n} from './store';\nimport { RooTStateT } from './api/interface';\n\nconst mapStateToProps = (state: RooTStateT) => ({\n  pendingTodos: getTodosListPending(state),\n  error: getTodosListError(state),\n  userId: getTodosListUserId(state),\n  pendingUser: getCurrentUserPending(state),\n});\n\nconst mapDispatchToProps = {\n  getTodos: fetchTodos,\n};\n\nconst connector = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n);\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst App: React.FC<Props> = ({\n  pendingTodos, error, userId, pendingUser, getTodos,\n}) => {\n  useEffect(() => {\n    getTodos();\n  }, [getTodos]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {pendingTodos ? (\n          <Loader />\n        ) : (\n          <TodoList />\n        )}\n        {error && (\n          <p>{error.toString()}</p>\n        )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {pendingUser && userId && (\n            <Loader />\n          )}\n          { userId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default connector(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}